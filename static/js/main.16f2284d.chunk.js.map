{"version":3,"sources":["icon/cloud.png","components/InputCityForm.jsx","components/CustomTooltip.jsx","components/ForecastPage.jsx","components/SingleCity.jsx","components/ListOfCities.jsx","App.jsx","index.js"],"names":["module","exports","__webpack_require__","p","InputCityForm","props","react_default","a","createElement","className","onSubmit","handleSubmit","placeholder","type","value","val","onChange","handleChange","CustomTooltip","_ref","payload","active","url","concat","icon","temp","time","src","alt","conditions","Chart","state","dataFetched","_this","weather","es6","width","height","data","this","margin","top","right","left","bottom","strokeDasharray","dataKey","content","components_CustomTooltip","name","stroke","activeDot","r","PureComponent","library","add","faChartLine","faTimes","faTimesCircle","SingleCity","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchDataCurrentTemp","fetch","then","resp","json","cod","setState","code","temperature","Math","round","main","description","fetchDataForecast","cloud","storageUpdate","dateChanger","input","split","join","list","map","el","dt_txt","forecastData","forecast","openForecast","forecastOn","foreCastButtonContent","window","setInterval","timeStamp","_this$state","spinner","role","elementClass","cityName","charAt","toUpperCase","slice","onClick","showForecast","title","innerWidth","react_fontawesome_index_es","deleteCity","ForecastPage","React","Component","ListOFCities","cityList","cities","city","components_SingleCity","key","App","localStorage","clear","setItem","JSON","stringify","handleChangeInputCity","e","lookingFor","target","preventDefault","includes","alert","handleDeleteCity","filter","componentDidMount","localStorageCities","fetchTimeStamp","components_InputCityForm","ListOfCities","initialData","parse","getItem","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.16f2284d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud.49f477a1.png\";","import React from 'react'; \r\n\r\nconst InputCityForm=(props)=>{\r\n  return(\r\n    <form className={\"input-group input-group-lg\"} onSubmit={props.handleSubmit}>\r\n      <input className={\"form-control\"} placeholder=\"Wpisz miasto\"\r\n      type=\"text\" value={props.val} onChange={props.handleChange}/>\r\n      <div className=\"input-group-append\">\r\n      <button className=\"btn btn-primary\" type=\"submit\">SZUKAJ</button></div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default InputCityForm","import React from \"react\"\r\n\r\nfunction CustomTooltip({ payload, active }) {\r\n  \r\n  if (active) {\r\n    \r\n    const url=`http://openweathermap.org/img/w/${payload[0].payload.icon}.png`\r\n    return (\r\n      <div className=\"container\">\r\n\r\n        <p className=\"label\">{`Temperatura: ${payload[0].payload.temp}Â°C`}</p>\r\n        <p className=\"label\">{`Data: ${payload[0].payload.time}`}</p>\r\n        <img src={url} alt=\"\"/>\r\n        <p className=\"label\">{payload[0].payload.conditions}</p>\r\n        \r\n      </div>\r\n      \r\n    );\r\n  }\r\n \r\n  return null;\r\n}\r\n\r\n    export default CustomTooltip","//chart based on recharts \r\n\r\nimport React, { PureComponent } from 'react';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\r\n} from 'recharts';\r\nimport CustomTooltip from \"./CustomTooltip\"\r\n\r\n\r\nclass Chart extends PureComponent {\r\n  state={\r\n    dataFetched:this.props.dataFetched,\r\n    weather:\"\",\r\n  }\r\n\r\n  render() {\r\n   \r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={200}>\r\n      <LineChart\r\n        \r\n        data={this.props.data}\r\n        margin={{\r\n          top: 10, right: 10, left: 0, bottom: 5,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"time\" />\r\n        <YAxis/>\r\n        {this.state.dataFetched?<Tooltip content={<CustomTooltip />}/>:null}\r\n        \r\n        <Legend />\r\n       <Line type=\"monotone\" dataKey=\"temp\" name=\"Prognozowana temperatura\" stroke=\"#8884d8\" activeDot={{ r: 10 }} />\r\n        \r\n        \r\n    \r\n      </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n  \r\n}\r\nexport default Chart\r\n\r\n\r\n\r\n ","//to dziaÅa\r\nimport React from \"react\";\r\nimport cloud from \"../icon/cloud.png\"\r\nimport Chart from \"./ForecastPage\"\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChartLine, faTimes, faTimesCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nlibrary.add(faChartLine,faTimes, faTimesCircle)\r\n\r\nclass SingleCity extends React.Component{\r\nconstructor(props){\r\n \r\n  super(props)\r\n  \r\n  this.state={\r\n    name:\"\",\r\n    temperature:\"\",\r\n    description:\"\",\r\n    icon:\"\",\r\n    code:\"\",\r\n    forecastOn:false,\r\n    forecast:false,\r\n    forecastData:\"\",\r\n    foreCastButtonContent:\"POKAÅ» PROGNOZÄ\"\r\n  }}\r\n\r\nfetchDataCurrentTemp=()=>{\r\n \r\n  fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.props.name}&units=metric&lang=pl&APPID=3400000105dc079b5c25c9439613c410`)\r\n  .then(resp => resp.json())\r\n    .then(resp => {\r\n        if(resp.cod===200){\r\n         \r\n        this.setState({\r\n          code:resp.cod,\r\n          temperature:`${Math.round(resp.main.temp)}Â°C`,\r\n          description:resp.weather[0].description,\r\n          icon:`http://openweathermap.org/img/w/${resp.weather[0].icon}.png`\r\n        })\r\n        //forecast data fetched only if city is on a list.\r\n        this.fetchDataForecast()\r\n      }\r\n        else{\r\n          \r\n          this.setState({\r\n            code:resp.cod,\r\n            temperature:\"Brak danych\",\r\n            description:\"Brak danych\",\r\n            icon:cloud\r\n          })\r\n        }\r\n        \r\n        ;})\r\n        \r\n        this.props.storageUpdate()\r\n}\r\n\r\nfetchDataForecast=()=>{\r\n  fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${this.props.name}&units=metric&lang=pl&APPID=3400000105dc079b5c25c9439613c410`)\r\n  .then(resp => resp.json())\r\n  .then(resp => {\r\n    const dateChanger=(input)=>{\r\n      let data=input.split(\":\").join(\" \").split(\"-\").join(\" \").split(\" \")\r\n      return `${data[2]}-${data[1]} ${data[3]}:${data[4]}`\r\n    }\r\n\r\n   const weather=resp.list.map((el)=>{return el={\r\n    \r\n    time: dateChanger(el.dt_txt),\r\n    temp:Math.round(el.main.temp),\r\n    conditions:el.weather[0].description,\r\n    icon:el.weather[0].icon,\r\n   }})\r\n   \r\n    \r\n     this.setState({\r\n      forecastData:weather,\r\n      forecast:true\r\n     })\r\n      \r\n      \r\n  })\r\n}\r\n  \r\n\r\ncomponentDidMount(){\r\n        this.fetchDataCurrentTemp()\r\n        //Update of current weather is optional - no dependencies.\r\n        window.setInterval(this.fetchDataCurrentTemp,this.props.timeStamp)\r\n        \r\n      }\r\n\r\n\r\nopenForecast=()=>{\r\n  if(this.state.code===200&&this.state.forecastOn===false){\r\n    this.setState({\r\n      forecastOn:true,\r\n      foreCastButtonContent:\"UKRYJ PROGNOZÄ\"\r\n    })\r\n  }\r\n  if(this.state.forecastOn===true){\r\n    this.setState({\r\n      forecastOn:false,\r\n      foreCastButtonContent:\"POKAÅ» PROGNOZÄ\"\r\n    })\r\n  }\r\n        \r\n}\r\n\r\n\r\n\r\nrender(){\r\n  \r\n  const name=this.props.name;\r\n  const{temperature,icon,description,code,forecastData}=this.state;\r\n  const spinner=<div className=\"spinner-border text-danger\" role=\"status\"></div>;\r\n  const elementClass=\"cityListItem--element\";\r\n  const cityName=name.charAt(0).toUpperCase()+name.slice(1)\r\n  return(\r\n    \r\n  \r\n    <li className=\"list-group-item list-group-item-action\" >\r\n     <div>\r\n      \r\n        <div className=\"cityListItem\">\r\n          <div className={elementClass} onClick={this.showForecast}>{cityName}</div>\r\n\r\n          <div className={elementClass}>{code?temperature:spinner}</div>\r\n\r\n          <div className={elementClass}>\r\n            <img className=\"cityListItem--element--image\"src={icon} title={description} alt={description}/></div>\r\n\r\n          <div className={elementClass}>\r\n          <button className={this.state.code===200?\"btn btn-success icon\":\"btn btn-outline-secondary icon\"} \r\n                    name={name} \r\n                    onClick={code===200?this.openForecast:null}>\r\n                    {window.innerWidth>=900?this.state.foreCastButtonContent:<FontAwesomeIcon icon=\"chart-line\" />}\r\n                    \r\n          </button></div>    \r\n            \r\n          <div className={elementClass}>\r\n            <button className={\"btn btn-danger icon\"} name={name} onClick={this.props.deleteCity}>{window.innerWidth>=900?\"USUÅ MIASTO\":<FontAwesomeIcon icon=\"times\" />}\r\n            </button></div>\r\n\r\n          \r\n          </div>\r\n        </div>\r\n        {this.state.forecastOn?<Chart className=\"cityListItem--element__big\" name={name} data={forecastData} dataFetched={this.state.forecast}/>:null}\r\n    </li>\r\n  )}\r\n  componentWillUnmount(){\r\n    this.props.storageUpdate()\r\n  }\r\n}\r\n\r\nexport default SingleCity\r\n","import React from 'react';\r\nimport SingleCity from \"./SingleCity.jsx\"\r\n\r\nconst ListOFCities=(props)=>{\r\n  const cityList=props.cities;\r\n\r\n  return(\r\n    <ol className=\"list-group\">\r\n      {cityList.map(city=>\r\n        <SingleCity key={city} name={city} deleteCity={props.deleteCity} storageUpdate={props.storageUpdate} timeStamp={props.timeStamp}/>\r\n      )}\r\n      \r\n    </ol>\r\n  )\r\n}\r\nexport default ListOFCities;","import React, { Component } from 'react';\nimport InputCityForm from \"./components/InputCityForm.jsx\"\nimport ListOfCities from \"./components/ListOfCities.jsx\"\n\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n    fetchTimeStamp:600000,\n    cities:[],\n    lookingFor:\"\"\n  }}\n  //Save list of cities in local store. Done by every \"add\" or \"remove\" citry from list.\n  storageUpdate=()=>{\n    localStorage.clear();\n    localStorage.setItem(\"initial\",JSON.stringify(this.state.cities))\n  } \n  //Input sended to controled form.\n  handleChangeInputCity=(e)=>{\n    this.setState({\n      lookingFor:e.target.value\n    })\n  }\n\n  handleSubmit=(e)=>{\n    e.preventDefault();\n\n    //filtration of repetition and empty input\n    if(this.state.lookingFor===\"\"){\n      alert(\"podaj nazwe miasta\")\n      return\n    }\n    if(this.state.cities.includes(this.state.lookingFor)){\n      alert(\"To miasto juÅ¼ jest na liÅcie\")\n      return\n    }\n    else{\n    this.setState({\n      cities: this.state.cities.concat(this.state.lookingFor),\n      lookingFor:\"\"\n    })\n    \n  }\n  }\n  \n  handleDeleteCity=(e)=>{\n   \n    this.setState({\n      cities:this.state.cities.filter(el=>\n        el!==e.target.name\n      )\n    })\n    this.storageUpdate()\n  }\n  componentDidMount=()=>{\n    if(this.props.localStorageCities){this.setState({\n      cities:this.props.localStorageCities\n    })}\n  }\n  \n\n  render() {\n    this.storageUpdate()\n    return (\n      <div className=\"appContainer\">\n          <h1 className=\"mainTitle\">PROGNOZA POGODY</h1>\n          <InputCityForm\n            val={this.state.lookingFor}\n            handleChange={this.handleChangeInputCity}\n            handleSubmit={this.handleSubmit}\n           \n          />\n          \n          <ListOfCities\n            openForecast={this.openForecast}\n            cities={this.state.cities}\n            deleteCity={this.handleDeleteCity}\n            storageUpdate={this.storageUpdate}\n            timeStamp={this.state.fetchTimeStamp}\n          />\n          \n        </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"./style.css\"\n\nconst initialData=JSON.parse(localStorage.getItem(\"initial\"))\n\n\n\nReactDOM.render(<App localStorageCities={initialData}/>, document.getElementById('root'));\n\n\n"],"sourceRoot":""}